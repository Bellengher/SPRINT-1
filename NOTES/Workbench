***Creating a FACT TABLE***

CREATE TABLE IF NOT EXISTS sales_fact (
    sales_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    date_id INT,
    quantity INT,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),	#This is references about dimension table 
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (date_id) REFERENCES dates(date_id)
);

***Creating a dimension table***

CREATE TABLE IF NOT EXISTS product (					#This example is counting Fact table above.
	id INT PRIMARY KEY,
	colour VARCHAR(60),
	code INT(50),
	size INT(4)
);

*PROCESO PARA CAMBIAR DE FORMATO DATE EN VISUAL STUDI CODE:
EDIT/REPLACE (USE REGULAR EXPRESSION)  !!!!
BUSCAR EN VISUAL STUDIO CODE: \b\d{1,2}/\d{1,2}/\d{2}\b
REMPLAZAR A: STR_TO_DATE('$0', '%m/%d/%y')

EDIT/REPLACE (WITHOUT REGULAR EXPRESSION) !!!!
REPLACE: 'STR ---> STR
REPLACE: )')  ---> ))



-------------------------------------------------------------------------------------------------------------------------------------------------------------

*****MANIPULAR BASE DE DATOS/ TABLAS ðŸ”“

***MOSTRAR***
SHOW TABLES;						# Muestra las tablas de una base de datos
SHOW COLUMNS FROM nombre_de_tabla;			# Muestra las columnas de la tabla indicada
SHOW CREATE TABLE nombre_de_tabla;			# Muestra el codigo para crear la tabla por si quisieramos clonarla
SHOW INDEXES FROM base_de_datos.nombre_de_tabla;	# MUESTRA INDEX DE LA TABLA
SHOW COLUMNS FROM base_de_datos.nombre_de_tabla;	# MUESTRA COLUMNAS DE LA TABLA

***CREAR TABLA*** ðŸ“‹
CREATE TABLE IF NOT EXISTS nombre_de_tabla (		# Crear tabla
	campo1 DATATYPE PRIMARY KEY,			# Nombrar campo y datatype
	campo2 DATATYPE, 
);

***INDEXAR TABLA*** ðŸ“‹
CREATE INDEX nombre_indice ON nombre_tabla (columna1, columna2, ...);

CREATE INDEX idx_credit_card_id ON transaction(credit_card_id);

***AGREGAR UNA FOREIGN KEY*** ðŸ”‘
ALTER TABLE tabla_de_hechos
ADD foreign key (columna_tabla_de_hechos) REFERENCES tabla_de_medidas(columna_tabla_de_medidas);


***MODIFICAR TABLAS***
RENAME TABLE nombre_de_tabla_anterior TO nuevo_nombre_de_tabla;			# Renombra la tabla indicada
DROP TABLE nombre_de_tabla;							# Elimina una tabla

**FILAS
INSERT INTO table_name (column1, column2,...) VALUES (value1, value2,...);	# Insertar una fila 
UPDATE table_name SET column1 = value1, ... WHERE condition;			# Actualizar una fila
DELETE FROM table_name WHERE condition;						# Borrar fila

**MODIFICAR COLUMNAS
ALTER TABLE nombre_de_tabla ADD nombre_de_columna INT NOT NULL; 		# Crea una nueva columna
ALTER TABLE nombre_de_tabla CHANGE  nombre_original nuevo_nombre INT NOT NULL; 	# Cambia nombre del columna
ALTER TABLE nombre_de_tabla DROP COLUMN nombre_de_columna ;			# Elimina una columna

---------------------------------------------------------------------------------------------------------------------------------------------------------
***MANIPULAR BASES DE DATOS***ðŸ¤–
SHOW DATABASES; 				# MUESTRA LAS BASES DE DATOS
CREATE DATABASE nombre_de_base_de_datos ;  	# CREA UNA BASE DE DATOS
DROP DATABASE nombre_de_base_de_datos ;		# ELIMINA BASE DE DATOS


----------------------------------------------------------------------------------------------------------------------------------------------------------
***SECURE STEP*** ðŸª„
SER AUTOCOMMIT = OFF;		# Desactiva el autoguardado.	
COMMIT;				# Crea un punto de retorno antes de los cambios.
ROLLBACK;			# Vuelve al punto de retorno.

----------------------------------------------------------------------------------------------------------------------------------------------------------

***PROCESOS***
**CREAR PROCESO**
DELIMITER //

CREATE PROCEDURE nombre_de_proceso()
BEGIN
    SELECT * FROM nombre_de_tabla;	# AquÃ­ se indica lo que queremos que haga el proceso
END //

DELIMITER ;

CALL nombre_de_proceso;			# Llama al proceso
DROP PROCEDURE nombre_de_proceso;	# Elimina el proceso
----------------------------------------------------------------------------------------------------------------------------------------------------------

***PARTITION BY***ðŸ’”

SELECT column1,column2,column3,
    SUM(column4) OVER (PARTITION BY column1 ORDER BY column2) AS sum_column4_partitioned
FROM
    your_table;
    
    
